"use strict";class Deamon{objectUri=void 0;constructor(){}buildScript=()=>`self.onconnect = function(e) {
    var port = e.ports[0];
    port.onmessage = function(e) {
      const delay = e.data[0]
      setTimeout(() => {
        port.postMessage('timeOver')
        port.close()
      }, delay)
    }
  }`;buildUri=e=>{const r=window.URL||window.webkitURL;e=new Blob([e],{type:"application/javascript"});this.objectUri=r.createObjectURL(e)};create=()=>{this.objectUri||this.buildUri(this.buildScript())};getDeamonWorker=()=>(this.create(),new SharedWorker(this.objectUri))}const DeamonWorker=new Deamon,isValid=r=>e=>Array.isArray(e)?e.some(e=>isValidArg(r)(e)):!!isValidArg(r)(e),isValidArg=r=>e=>"null"===e?null===r:"undefined"===e?void 0===r:"action"===e?isValidAction(r):Array.isArray(r)?!("array"!==e&&!testArray[e])&&("array"===e||testArray[e](r)):!!r&&typeof r===e.toString(),isValidAction=e=>isValidObjectWith(["message","func"])(e)&&"function"==typeof e.func&&"string"==typeof e.message,isValidObjectWith=e=>r=>!!r&&!Array.isArray(r)&&e.every(e=>r.hasOwnProperty(e)),testArray={actionsArray:e=>isValidActionsArray(e),arraysArray:e=>e.every(e=>Array.isArray(e)),objectsArray:e=>isValidObjectsArray(e)(),postParamsArray:e=>isValidPostParamsArray(e),stringsArray:e=>e.every(e=>"string"==typeof e)},isValidActionsArray=e=>e.every(isValidAction),isValidObjectsArray=r=>(e=[])=>r.every(isValidObjectWith(e)),isValidPostParamsArray=e=>e.every(isValidPostParams),isValidPostParams=e=>isValidObjectWith(["message","args"])(e)&&Array.isArray(e.args)&&"string"==typeof e.message,argumentError=({expected:r="",received:t,extraInfo:s=""})=>{try{return new TypeError("You should provide "+r+"\n"+s+"\nReceived: "+JSON.stringify(t))}catch(e){if("Converting circular structure to JSON"===e.message)return new TypeError("You should provide "+r+"\n"+s+"\nReceived a circular structure: "+t);throw e}};class ThreadBase{constructor(){}}class AbstractThreadFactory{buildUri=e=>{const r=window.URL||window.webkitURL;e=new Blob([e],{type:"application/javascript"});return r.createObjectURL(e)}}class SimpleThreadFactory extends AbstractThreadFactory{constructor(){super()}buildScript=e=>`
  self.onmessage = function(event) {
    var args = event.data.message.args
    if (args) {
      self.postMessage((${e}).apply(null, args))
      return close()
    }
    self.postMessage((${e})())
    return close()
  }`;getThread=e=>{e=this.buildUri(this.buildScript(e));return{worker:new Worker(e),uri:e}};destroy=({worker:e,uri:r})=>{if(e&&e.terminate(),r){const t=window.URL||window.webkitURL;t.revokeObjectURL(r)}}}class Thread extends ThreadBase{constructor(e,r){super(),this.deamonWorker=r||DeamonWorker,this.threadFactory=e||new SimpleThreadFactory}deamonWorker;threadFactory;thread;create=e=>{this.thread=this.threadFactory.getThread(e)};createDeamonWorker=t=>{const s=this;if(t&&0<t){const o=s.deamonWorker.getDeamonWorker();return new Promise((e,r)=>{o.port.onmessage=e=>{s.destroy(),r(e.data+". this worker is closed")},o.port.postMessage([t])})}};destroy=()=>{this.thread&&(this.threadFactory.destroy(this.thread),this.thread=void 0)};run=(e,o)=>{var r=isValid(e)("function"),t=isValid(o)(["array","undefined"]);if(!r)return console.error(argumentError({expected:"a function",received:e})),null;if(!t)return console.error(argumentError({expected:"an array",received:o})),null;const i=this;return this.create(e),e=>{const s=this.createDeamonWorker(e);return new Promise((r,t)=>{s&&s.catch(t),i.thread.worker.onmessage=e=>{i.destroy(),r(e.data)},i.thread.worker.onerror=e=>{console.error(`Error: Line ${e.lineno} in ${e.filename}: `+e.message),t(e)},i.thread.worker.postMessage({message:{args:o}})})}}}class SimpleThreadUnitFactory extends AbstractThreadFactory{constructor(){super()}buildScript=e=>`
  self.onmessage = function(event) {
    var args = event.data.message.args
    var task = event.data.message.task
    if (args) {
      self.postMessage(eval(task).apply(null, args))
    }else{
      self.postMessage(eval(task)())
    }
  }`;getThread=e=>{e=this.buildUri(this.buildScript(e));return{worker:new Worker(e),uri:e}};destroy=({worker:e,uri:r})=>{if(e&&e.terminate(),r){const t=window.URL||window.webkitURL;t.revokeObjectURL(r)}}}class AbstractThreadPoolExecutor{constructor(e){}}var TimeUnit;!function(e){e[e.MILLISECONDS=1]="MILLISECONDS",e[e.SECONDS=1e3]="SECONDS",e[e.MINUTES=6e4]="MINUTES",e[e.HOURS=36e5]="HOURS",e[e.DAYS=864e5]="DAYS"}(TimeUnit=TimeUnit||{});class ArrayQueue{element;length;constructor(e){this.length=e,this.element=[]}size=()=>this.element.length;isEmpty=()=>0===this.element.length;contains=e=>this.element.includes(e);toArray=()=>Array.from(this.element);iterator=()=>this.element.values();add=e=>this.element.length<this.length&&(this.element.push(e),!0);poll=()=>0<this.element.length?this.element.shift():null;peek=()=>0<this.element.length?this.element[0]:null}class ThreadPoolExecutor extends AbstractThreadPoolExecutor{static DEFAULT_INTERVAL=100;corePoolSize;maximumPoolSize;keepAliveTime;timeUnit;workQueue;workerFactory;rejectedExecutionHandler;workerThread;interval;timeoutHandlers=[];startConsumer(){this.interval=setInterval(this.consumer,ThreadPoolExecutor.DEFAULT_INTERVAL)}constructor(e){super(),this.corePoolSize=e?.corePoolSize||5,this.maximumPoolSize=e?.maximumPoolSize||10,this.keepAliveTime=e?.keepAliveTime||30,this.timeUnit=e?.timeUnit||TimeUnit.SECONDS,this.workQueue=e?.workQueue||new ArrayQueue(20),this.workerFactory=e?.workerFactory||new SimpleThreadUnitFactory,this.rejectedExecutionHandler=e?.rejectedExecutionHandler||new DefalutHandler,this.workerThread=new Array(this.corePoolSize),this.initThread()}initThread(){for(let e=0;e<this.corePoolSize;e++)this.workerThread[e]={thread:this.workerFactory.getThread(),lock:!1}}getIdleWorker(e){var r,t=this.workerThread.findIndex(e=>!e.lock);if(-1==t){if(!(this.workerThread.length<this.maximumPoolSize))return;this.workerThread.push({thread:this.workerFactory.getThread(),lock:!1}),this.timeoutHandlers.push(setTimeout(()=>{this.delayDestroy()},this.keepAliveTime*this.timeUnit))}return t>=this.corePoolSize&&(r=t-this.corePoolSize,clearTimeout(this.timeoutHandlers[r]),this.timeoutHandlers.splice(r,1,setTimeout(()=>{this.delayDestroy()},this.keepAliveTime*this.timeUnit))),this.workerThread[t]}submit=e=>{return isValidObjectWith(["func","success"])(e)?isValid(e.func)("function")?isValid(e.args)(["array","undefined"])?isValid(e.success)("function")?isValid(e.error)(["function","undefined"])?this.run(e):(console.error(argumentError({expected:"a function",received:e.error})),null):(console.error(argumentError({expected:"a function",received:e.success})),null):(console.error(argumentError({expected:"an array",received:e.args})),null):(console.error(argumentError({expected:"a function",received:e.func})),null):(console.error(argumentError({expected:"a Object, and has Property ['func', 'success']",received:e})),null)};run=(t,e=!0)=>{const s=this.getIdleWorker(t);if(s)try{const o=s.thread.worker;return o.addEventListener("message",function e(r){o.removeEventListener("message",e),s.lock=!1,t.success(r)}),o.addEventListener("error",function e(r){o.removeEventListener("error",e),s.lock=!1,console.error("Error: Line "+e),t.error&&t.error(r)}),o.postMessage({message:{task:`(${t.func.toString()})`,args:t.args}}),s.lock=!0}catch(e){console.error(`this task ${t.func} error. thread running fails `+e)}return e&&(this.workQueue.add(t)||this.rejectedExecutionHandler.rejectedExecution(t,this,new TypeError("task queue is full")),this.interval||this.startConsumer()),!1};consumer=()=>{const e=this.workQueue.toArray();let r=0;e.every(e=>{e=this.run(e,!1);return e&&r++,e});for(let e=0;e<r;e++)this.workQueue.poll();this.workQueue.isEmpty()&&(clearInterval(this.interval),this.interval=void 0)};delayDestroy(){let r=-1;for(let e=this.workerThread.length-1;e>=this.corePoolSize;e--)if(!this.workerThread[e].lock){r=e;break}var e;-1<r&&(e=this.workerThread[r],this.workerFactory.destroy(e.thread),this.workerThread.splice(r,1),e=r-this.corePoolSize,this.timeoutHandlers.splice(e,1))}}class DefalutHandler{rejectedExecution=(e,r,t)=>{console.error(t),e.error&&e.error(t)}}class WorkerBuilder{thread;threadPoolExecutor;constructor(){window.Worker?window.SharedWorker?window.URL.createObjectURL||window.webkitURL.createObjectURL?(this.thread=Thread,this.threadPoolExecutor=ThreadPoolExecutor):console.error("This browser does not have URL.createObjectURL method."):console.error("This browser does not support SharedWorker."):console.error("This browser does not support Workers.")}build=()=>this.thread;buildPoolExecutor=()=>this.threadPoolExecutor}module.exports=WorkerBuilder;
//# sourceMappingURL=wtw.min.js.map
