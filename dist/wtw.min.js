"use strict";class Deamon{objectUri=void 0;constructor(){}buildScript=()=>`self.onconnect = function(e) {
    var port = e.ports[0];
    port.onmessage = function(e) {
      const delay = e.data[0]
      setTimeout(() => {
        port.postMessage('timeOver')
        port.close()
      }, delay)
    }
  }`;buildUri=r=>{const e=window.URL||window.webkitURL;r=new Blob([r],{type:"application/javascript"});this.objectUri=e.createObjectURL(r)};create=()=>{this.objectUri||this.buildUri(this.buildScript())};getDeamonWorker=()=>(this.create(),new SharedWorker(this.objectUri))}const DeamonWorker=new Deamon,isValid=e=>r=>Array.isArray(r)?r.some(r=>isValidArg(e)(r)):!!isValidArg(e)(r),isValidArg=e=>r=>"null"===r?null===e:"undefined"===r?void 0===e:"action"===r?isValidAction(e):Array.isArray(e)?!("array"!==r&&!testArray[r])&&("array"===r||testArray[r](e)):!!e&&typeof e===r.toString(),isValidAction=r=>isValidObjectWith(["message","func"])(r)&&"function"==typeof r.func&&"string"==typeof r.message,isValidObjectWith=r=>e=>!!e&&!Array.isArray(e)&&r.every(r=>e.hasOwnProperty(r)),testArray={actionsArray:r=>isValidActionsArray(r),arraysArray:r=>r.every(r=>Array.isArray(r)),objectsArray:r=>isValidObjectsArray(r)(),postParamsArray:r=>isValidPostParamsArray(r),stringsArray:r=>r.every(r=>"string"==typeof r)},isValidActionsArray=r=>r.every(isValidAction),isValidObjectsArray=e=>(r=[])=>e.every(isValidObjectWith(r)),isValidPostParamsArray=r=>r.every(isValidPostParams),isValidPostParams=r=>isValidObjectWith(["message","args"])(r)&&Array.isArray(r.args)&&"string"==typeof r.message,argumentError=({expected:e="",received:t,extraInfo:o=""})=>{try{return new TypeError("You should provide "+e+"\n"+o+"\nReceived: "+JSON.stringify(t))}catch(r){if("Converting circular structure to JSON"===r.message)return new TypeError("You should provide "+e+"\n"+o+"\nReceived a circular structure: "+t);throw r}};class ThreadBase{constructor(){}run=()=>()=>{console.error("This browser does not have the conditions for execution")}}class Thread extends ThreadBase{constructor(r){super(),this.objectUri=r?.objectUri,this.worker=r?.worker,this.deamonWorker=r?.deamonWorker||DeamonWorker}deamonWorker;objectUri;worker;buildScript=r=>`
  self.onmessage = function(event) {
    const args = event.data.message.args
    if (args) {
      self.postMessage((${r}).apply(null, args))
      return close()
    }
    self.postMessage((${r})())
    return close()
  }`;buildUri=r=>{const e=window.URL||window.webkitURL;r=new Blob([r],{type:"application/javascript"});this.objectUri=e.createObjectURL(r)};create=(r,e)=>{var t=this;t.objectUri||(r=this.buildScript(r),t.buildUri(r)),t.worker||(t.worker=new Worker(this.objectUri))};createDeamonWorker=t=>{const o=this;if(t&&0<t){const s=o.deamonWorker.getDeamonWorker();return new Promise((r,e)=>{s.port.onmessage=r=>{o.destroy(),e(r.data+". this worker is closed")},s.port.postMessage([t])})}};destroy=()=>{if(this.worker&&(this.worker.terminate(),this.worker=void 0),"testUri"!==this.objectUri){const r=window.URL||window.webkitURL;r.revokeObjectURL(this.objectUri),this.objectUri=void 0}};run=(r,s)=>{var e=isValid(r)("function"),t=isValid(s)(["array","undefined"]);if(!e)return console.error(argumentError({expected:"a function",received:r})),null;if(!t)return console.error(argumentError({expected:"an array",received:s})),null;const i=this;return this.create(r),r=>{const o=this.createDeamonWorker(r);return new Promise((e,t)=>{o&&o.catch(t),i.worker.onmessage=r=>{i.destroy(),e(r.data)},i.worker.onerror=r=>{console.error(`Error: Line ${r.lineno} in ${r.filename}: `+r.message),t(r)},i.worker.postMessage({message:{args:s}})})}}}class WorkerBuilder{thread;constructor(){this.thread=ThreadBase,window.Worker?window.SharedWorker?window.URL.createObjectURL||window.webkitURL.createObjectURL?this.thread=Thread:console.error("This browser does not have URL.createObjectURL method."):console.error("This browser does not support SharedWorker."):console.error("This browser does not support Workers.")}build=()=>this.thread}module.exports=WorkerBuilder;
//# sourceMappingURL=wtw.min.js.map
