{"version":3,"file":"wtw.min.js","sources":["../src/DaemonWorker.ts","../src/utils.ts","../src/Thread.ts","../src/index.ts"],"sourcesContent":["export class Deamon {\n\n  private objectUri: string = undefined\n\n  constructor() {\n    // init DeamonWorker\n  }\n\n  private buildScript= () => `self.onconnect = function(e) {\n    var port = e.ports[0];\n    port.onmessage = function(e) {\n      const delay = e.data[0]\n      setTimeout(() => {\n        port.postMessage('timeOver')\n        port.close()\n      }, delay)\n    }\n  }`\n\n  private buildUri = (jsScriprt: string) => {\n    const URL = window.URL || window.webkitURL\n    const blob = new Blob([jsScriprt], { type: 'application/javascript' }) // eslint-disable-line\n    this.objectUri = URL.createObjectURL(blob)\n  }\n\n  private create = () => {\n    if (!this.objectUri) {\n      this.buildUri(this.buildScript())\n    }\n  }\n\n  public getDeamonWorker = () => {\n    this.create()\n    return new SharedWorker(this.objectUri)\n  }\n}\n\nexport const DeamonWorker = new Deamon()","import { InferredType, ExtensionArrayType, CollectionFuncObj, TestArrayType, PostParams, ExecptionMessage } from \"./index.d\"\n\nconst isValid = (argument: any) => (types: InferredType | InferredType[]) => {\n  if (Array.isArray(types)) {\n    return types.some(type => isValidArg(argument)(type))\n  }\n  if (isValidArg(argument)(types)) {\n    return true\n  }\n  return false\n}\n\nconst isValidArg = (arg: any) => (type: InferredType) => {\n  if (type === 'null') {\n    return arg === null\n  }\n  if (type === 'undefined') {\n    return arg === undefined\n  }\n  if (type === 'action') {\n    return isValidAction(arg)\n  }\n  if (Array.isArray(arg)) {\n    if (type !== 'array' && !testArray[type as ExtensionArrayType]) return false\n    if (type === 'array') return true\n    return testArray[type as ExtensionArrayType](arg)\n  }\n  if (arg) {\n    return typeof arg === type.toString() // eslint-disable-line\n  }\n  return false\n}\n\nconst isValidAction = (obj:CollectionFuncObj) => {\n  return isValidObjectWith(['message', 'func'])(obj) &&\n    typeof obj.func === 'function' && typeof obj.message === 'string'\n}\n\n// Verify that the fields exists in the Object\nconst isValidObjectWith = (fields: string[]) => (obj:Object) =>\n  !!obj && !Array.isArray(obj) && fields.every(field => obj.hasOwnProperty(field))\n\nconst testArray:TestArrayType = {\n  'actionsArray': (arr): boolean => isValidActionsArray(arr),\n  'arraysArray': (arr) => arr.every(item => Array.isArray(item)),\n  'objectsArray': (arr) => isValidObjectsArray(arr)(),\n  'postParamsArray': (arr) => isValidPostParamsArray(arr),\n  'stringsArray': (arr) => arr.every(item => typeof item === 'string')\n}\n\nconst isValidActionsArray:(arr:CollectionFuncObj[]) => boolean = (arr) => arr.every(isValidAction)\n\nconst isValidObjectsArray = (arr:Object[]) => (fields:string[] = []) =>\n  arr.every(isValidObjectWith(fields))\n\nconst isValidPostParamsArray = (arr:any[]) => arr.every(isValidPostParams)\n\nconst isValidPostParams = (obj: PostParams) => {\n  return isValidObjectWith(['message', 'args'])(obj) &&\n    Array.isArray(obj.args) && typeof obj.message === 'string'\n}\n\n// Argument error builder\nconst argumentError = ({ expected = '', received, extraInfo = '' }:ExecptionMessage) => {\n  try {\n    return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived: ' + JSON.stringify(received)}`)\n  } catch (err: unknown) {\n    if ((err as DOMException).message === 'Converting circular structure to JSON') {\n      return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived a circular structure: ' + received}`)\n    }\n    throw err\n  }\n}\n\nexport {\n  argumentError,\n  isValid\n}","import { WorkerWrapper, ArgumentType } from \"./index.d\";\nimport { DeamonWorker, Deamon } from \"./DaemonWorker\";\nimport { isValid, argumentError } from \"./utils\";\n\nexport class Thread implements WorkerWrapper {\n  constructor(threadOptions?: { objectUri?: string, worker?: Worker, deamonWorker?: Deamon }) {\n    this.objectUri = threadOptions?.objectUri;\n    this.worker = threadOptions?.worker;\n    this.deamonWorker = threadOptions?.deamonWorker || DeamonWorker\n  }\n\n  private deamonWorker: Deamon;\n\n  private objectUri: string;\n\n  private worker: Worker;\n\n  private buildScript = (task: Function) => `\n  self.onmessage = function(event) {\n    const args = event.data.message.args\n    if (args) {\n      self.postMessage((${task}).apply(null, args))\n      return close()\n    }\n    self.postMessage((${task})())\n    return close()\n  }`\n\n  // private buildTimingScript = (task: Function, sharedUri: string, delay: number) => `\n  // self.onmessage = function(event) {\n  //   var sharedWorker = new SharedWorker('${sharedUri}');\n  //   sharedWorker.port.onmessage = function(e) {\n  //     console.log(e, 'Message received from DaemonWorker');\n  //     self.postMessage(e.data + \\`. this worker (${task}) is close\\`)\n  //     return close()\n  //   }\n  //   sharedWorker.port.postMessage([${delay}])\n  //   const args = event.data.message.args\n  //   if (args) {\n  //     self.postMessage((${task}).apply(null, args))\n  //     return close()\n  //   }\n  //   self.postMessage((${task})())\n  //   return close()\n  // }`// woker堆栈问题, onmessage一定会在该方法执行完之后执行, 没办法取到一个监听作用\n\n  private buildUri = (jsScriprt: string) => {\n    const URL = window.URL || window.webkitURL\n    const blob = new Blob([jsScriprt], { type: 'application/javascript' }) // eslint-disable-line\n    this.objectUri = URL.createObjectURL(blob)\n  }\n\n  private create = (func: Function, delay?: number) => {\n    // objectUri is not exsit. init\n    const that = this\n    if (!that.objectUri) {\n      let jsScriprtStr = this.buildScript(func)\n      that.buildUri(jsScriprtStr)\n    }\n    // worker is not exsit. init\n    if (!that.worker) {\n      that.worker = new Worker(this.objectUri)\n    }\n  }\n\n  private createDeamonWorker: (delay?: number) => Promise<string> | undefined = (delay) => {\n    // deamonWorker is not exsit. init\n    const that = this\n    if (!!delay && delay > 0) {\n      const deammonTiming = that.deamonWorker.getDeamonWorker()\n      return new Promise<string>((resolve, reject) => {\n        deammonTiming.port.onmessage = (e) => {\n          that.destroy()\n          reject(`${e.data}. this worker is closed`)\n        }\n        deammonTiming.port.postMessage([delay])\n        console.log(\"deamonWorker timing start...\")\n      })\n    }\n    return undefined\n  }\n\n\n  private destroy = () => {\n    if (this.worker) {\n      this.worker.terminate()\n      this.worker = undefined\n    }\n    if (this.objectUri !== \"testUri\") {\n      const URL = window.URL || window.webkitURL\n      URL.revokeObjectURL(this.objectUri)\n      this.objectUri = undefined\n    }\n  }\n\n  public run = <T>(task: Function, args?: ArgumentType) => {\n    const validWork = isValid(task)('function')\n    const validArgs = isValid(args)(['array', 'undefined'])\n    if (!validWork) {\n      console.error(argumentError({ expected: 'a function', received: task }))\n      return null\n    }\n    if (!validArgs) {\n      console.error(argumentError({ expected: 'an array', received: args }))\n      return null\n    }\n\n    const that = this\n    this.create(task)\n    return (delay?: number) => {\n      const deamonPromise = this.createDeamonWorker(delay);\n      return new Promise<T | string>((resolve, reject) => {\n        !!deamonPromise && deamonPromise.catch(reject)\n        that.worker.onmessage = (event) => {\n          that.destroy()\n          resolve(event.data)\n        }\n        that.worker.onerror = (error: ErrorEvent) => {\n          console.error(`Error: Line ${error.lineno} in ${error.filename}: ${error.message}`)\n          reject(error)\n        }\n        that.worker.postMessage({ message: { args } })\n      })\n    }\n  }\n}","import { Thread } from \"./Thread\"\n\nclass WorkerBuilder {\n  private thread: any;\n\n  constructor() {\n\n    this.thread = class{\n          constructor(){}\n          public run = () => {console.error('This browser does not have the conditions for execution')}\n        }\n    if (!window.Worker) {\n      console.error('This browser does not support Workers.')\n      return\n    }\n    if (!window.SharedWorker) {\n      console.error('This browser does not support SharedWorker.')\n      return\n    }\n    if (!(window.URL.createObjectURL || window.webkitURL.createObjectURL)) {\n      console.error('This browser does not have URL.createObjectURL method.')\n      return\n    }\n    this.thread = Thread\n  }\n  public build = () => this.thread\n}\n\nexport default WorkerBuilder\n\n\n// const WorkerBuilder = () => {\n//   let thread: any = class{\n//     constructor(){}\n//     public run = () => {console.error('This browser does not have the conditions for execution')}\n//   }\n  \n//   if (!window.Worker) {\n//     console.error('This browser does not support Workers.')\n//   }else if (!window.SharedWorker) {\n//     console.error('This browser does not support SharedWorker.')\n//   }else if (!(window.URL.createObjectURL || window.webkitURL.createObjectURL)) {\n//     console.error('This browser does not have URL.createObjectURL method.')\n//   }else{\n//     thread = Thread\n//   }\n//   return thread\n// }\n\n// const Test = WorkerBuilder()\n\n// export default WorkerBuilder"],"names":["Deamon","objectUri","undefined","constructor","buildScript","buildUri","URL","window","webkitURL","blob","Blob","jsScriprt","type","this","createObjectURL","create","getDeamonWorker","SharedWorker","DeamonWorker","isValid","Array","isArray","types","some","isValidArg","argument","arg","isValidAction","testArray","toString","isValidObjectWith","obj","func","message","fields","every","field","hasOwnProperty","actionsArray","isValidActionsArray","arr","arraysArray","item","objectsArray","isValidObjectsArray","postParamsArray","isValidPostParamsArray","stringsArray","isValidPostParams","args","argumentError","expected","received","extraInfo","TypeError","JSON","stringify","err","Thread","threadOptions","worker","deamonWorker","task","delay","that","jsScriprtStr","Worker","createDeamonWorker","deammonTiming","Promise","resolve","reject","port","onmessage","destroy","e","data","postMessage","console","log","terminate","revokeObjectURL","run","validWork","validArgs","error","deamonPromise","catch","event","onerror","lineno","filename","WorkerBuilder","thread","build"],"mappings":"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"}