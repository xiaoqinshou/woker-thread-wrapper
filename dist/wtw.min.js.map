{"version":3,"file":"wtw.min.js","sources":["../src/DaemonWorker.ts","../src/util/utils.ts","../src/AbstractThread.ts","../src/AbstractThreadFactory.ts","../src/SimpleThreadFactory.ts","../src/Thread.ts","../src/SimpleThreadUnitFactory.ts","../src/AbstractThreadPoolExecutor.ts","../src/types.ts","../src/util/ArrayQueue.ts","../src/ThreadPoolExecutor.ts","../src/index.ts"],"sourcesContent":["export class Deamon {\n\n  private objectUri: string = undefined\n\n  constructor() {\n    // init DeamonWorker\n  }\n\n  private buildScript= () => `self.onconnect = function(e) {\n    var port = e.ports[0];\n    port.onmessage = function(e) {\n      const delay = e.data[0]\n      setTimeout(() => {\n        port.postMessage('timeOver')\n        port.close()\n      }, delay)\n    }\n  }`\n\n  private buildUri = (jsScriprt: string) => {\n    const URL = window.URL || window.webkitURL\n    const blob = new Blob([jsScriprt], { type: 'application/javascript' }) // eslint-disable-line\n    this.objectUri = URL.createObjectURL(blob)\n  }\n\n  private create = () => {\n    if (!this.objectUri) {\n      this.buildUri(this.buildScript())\n    }\n  }\n\n  public getDeamonWorker = () => {\n    this.create()\n    return new SharedWorker(this.objectUri)\n  }\n}\n\nexport const DeamonWorker = new Deamon()","import { InferredType, ExtensionArrayType, CollectionFuncObj, TestArrayType, PostParams, ExecptionMessage } from \"../types\"\n\nconst isValid = (argument: any) => (types: InferredType | InferredType[]) => {\n  if (Array.isArray(types)) {\n    return types.some(type => isValidArg(argument)(type))\n  }\n  if (isValidArg(argument)(types)) {\n    return true\n  }\n  return false\n}\n\nconst isValidArg = (arg: any) => (type: InferredType) => {\n  if (type === 'null') {\n    return arg === null\n  }\n  if (type === 'undefined') {\n    return arg === undefined\n  }\n  if (type === 'action') {\n    return isValidAction(arg)\n  }\n  if (Array.isArray(arg)) {\n    if (type !== 'array' && !testArray[type as ExtensionArrayType]) return false\n    if (type === 'array') return true\n    return testArray[type as ExtensionArrayType](arg)\n  }\n  if (arg) {\n    return typeof arg === type.toString() // eslint-disable-line\n  }\n  return false\n}\n\nconst isValidAction = (obj:CollectionFuncObj) => {\n  return isValidObjectWith(['message', 'func'])(obj) &&\n    typeof obj.func === 'function' && typeof obj.message === 'string'\n}\n\n// Verify that the fields exists in the Object\nconst isValidObjectWith = (fields: string[]) => (obj:Object) =>\n  !!obj && !Array.isArray(obj) && fields.every(field => obj.hasOwnProperty(field))\n\nconst testArray:TestArrayType = {\n  'actionsArray': (arr): boolean => isValidActionsArray(arr),\n  'arraysArray': (arr) => arr.every(item => Array.isArray(item)),\n  'objectsArray': (arr) => isValidObjectsArray(arr)(),\n  'postParamsArray': (arr) => isValidPostParamsArray(arr),\n  'stringsArray': (arr) => arr.every(item => typeof item === 'string')\n}\n\nconst isValidActionsArray:(arr:CollectionFuncObj[]) => boolean = (arr) => arr.every(isValidAction)\n\nconst isValidObjectsArray = (arr:Object[]) => (fields:string[] = []) =>\n  arr.every(isValidObjectWith(fields))\n\nconst isValidPostParamsArray = (arr:any[]) => arr.every(isValidPostParams)\n\nconst isValidPostParams = (obj: PostParams) => {\n  return isValidObjectWith(['message', 'args'])(obj) &&\n    Array.isArray(obj.args) && typeof obj.message === 'string'\n}\n\n// Argument error builder\nconst argumentError = ({ expected = '', received, extraInfo = '' }:ExecptionMessage) => {\n  try {\n    return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived: ' + JSON.stringify(received)}`)\n  } catch (err: unknown) {\n    if ((err as DOMException).message === 'Converting circular structure to JSON') {\n      return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived a circular structure: ' + received}`)\n    }\n    throw err\n  }\n}\n\nexport {\n  isValidObjectWith,\n  argumentError,\n  isValid\n}","export default abstract class ThreadBase {\n    constructor() {}\n    abstract run: <T>(task: Function, args?: any) => (delay?: number) => Promise<T>;\n}","import { ThreadFactory, ThreadUnit } from \"./types\";\n\n/**\n * this class is abstract\n */\nexport default abstract class AbstractThreadFactory<W extends AbstractWorker> implements ThreadFactory<W>{\n  abstract getThread: (task?: Function) => ThreadUnit<W>;\n  abstract destroy: (thread: ThreadUnit<W>) => void;\n  protected buildUri: (jsScriprt: string) => string = (jsScriprt: string) => {\n    const URL = window.URL || window.webkitURL\n    const blob = new Blob([jsScriprt], { type: 'application/javascript' }) // eslint-disable-line\n    return URL.createObjectURL(blob)\n  }\n}","import AbstractThreadFactory from \"./AbstractThreadFactory\";\nimport { ThreadUnit } from \"./types\";\n\nexport default class SimpleThreadFactory extends AbstractThreadFactory<Worker> {\n  constructor() {\n    super()\n   }\n  private buildScript: (task: Function) => string = (task: Function) => `\n  self.onmessage = function(event) {\n    var args = event.data.message.args\n    if (args) {\n      self.postMessage((${task}).apply(null, args))\n      return close()\n    }\n    self.postMessage((${task})())\n    return close()\n  }`\n  getThread: (task: Function) => ThreadUnit<Worker> = (task: Function) => {\n    const uri = this.buildUri(this.buildScript(task))\n    const worker = new Worker(uri)\n    return {\n      worker,\n      uri\n    }\n  }\n  destroy: (thread: ThreadUnit<Worker>) => void = ({ worker, uri }: ThreadUnit<Worker>) => {\n    if (worker) {\n      worker.terminate()\n    }\n    if (uri) {\n      const URL = window.URL || window.webkitURL\n      URL.revokeObjectURL(uri)\n    }\n  }\n}","import { ArgumentType, ThreadFactory, ThreadUnit } from \"./types\";\nimport { DeamonWorker, Deamon } from \"./DaemonWorker\";\nimport { isValid, argumentError } from \"./util/utils\";\nimport AbstractThread from \"./AbstractThread\";\nimport SimpleThreadFactory from \"./SimpleThreadFactory\";\n\nexport class Thread extends AbstractThread {\n  constructor(threadFactory?: ThreadFactory<Worker>, deamonWorker?: Deamon) {\n    super()\n    this.deamonWorker = deamonWorker || DeamonWorker\n    this.threadFactory = threadFactory || new SimpleThreadFactory()\n  }\n\n  private deamonWorker: Deamon;\n\n  private threadFactory: ThreadFactory<Worker>;\n\n  private thread: ThreadUnit<Worker>;\n\n  private create = (func: Function) => {\n    this.thread = this.threadFactory.getThread(func)\n  }\n\n  private createDeamonWorker: (delay?: number) => Promise<string> | undefined = (delay) => {\n    // deamonWorker is not exsit. init\n    const that = this\n    if (!!delay && delay > 0) {\n      const deammonTiming = that.deamonWorker.getDeamonWorker()\n      return new Promise<string>((resolve, reject) => {\n        deammonTiming.port.onmessage = (e) => {\n          that.destroy()\n          reject(`${e.data}. this worker is closed`)\n        }\n        deammonTiming.port.postMessage([delay])\n      })\n    }\n    return undefined\n  }\n\n\n  private destroy = () => {\n    if (this.thread) {\n      this.threadFactory.destroy(this.thread)\n      this.thread = undefined\n    }\n  }\n\n  public run = <T>(task: Function, args?: ArgumentType) => {\n    const validWork = isValid(task)('function')\n    const validArgs = isValid(args)(['array', 'undefined'])\n    if (!validWork) {\n      console.error(argumentError({ expected: 'a function', received: task }))\n      return null\n    }\n    if (!validArgs) {\n      console.error(argumentError({ expected: 'an array', received: args }))\n      return null\n    }\n\n    const that = this\n    this.create(task)\n    return (delay?: number) => {\n      const deamonPromise = this.createDeamonWorker(delay);\n      return new Promise<T>((resolve, reject) => {\n        !!deamonPromise && deamonPromise.catch(reject)\n        that.thread.worker.onmessage = (event) => {\n          that.destroy()\n          resolve(event.data)\n        }\n        that.thread.worker.onerror = (error: ErrorEvent) => {\n          console.error(`Error: Line ${error.lineno} in ${error.filename}: ${error.message}`)\n          reject(error)\n        }\n        that.thread.worker.postMessage({ message: { args } })\n      })\n    }\n  }\n}","import AbstractThreadFactory from \"./AbstractThreadFactory\";\nimport { ThreadUnit } from \"./types\";\n\nexport default class SimpleThreadUnitFactory extends AbstractThreadFactory<Worker>{\n  constructor() {\n    super();\n  }\n  private buildScript: (task: Function) => string = (task: Function) => `\n  self.onmessage = function(event) {\n    var args = event.data.message.args\n    var task = event.data.message.task\n    if (args) {\n      self.postMessage(eval(task).apply(null, args))\n    }else{\n      self.postMessage(eval(task)())\n    }\n  }`\n  getThread: (task?: Function) => ThreadUnit<Worker> = (task?: Function) => {\n    const uri = this.buildUri(this.buildScript(task))\n    const worker = new Worker(uri)\n    return {\n      worker,\n      uri\n    }\n  }\n  destroy: (thread: ThreadUnit<Worker>) => void = ({ worker, uri }: ThreadUnit<Worker>) => {\n    if (worker) {\n      worker.terminate()\n    }\n    if (uri) {\n      const URL = window.URL || window.webkitURL\n      URL.revokeObjectURL(uri)\n    }\n  }\n}","import { ThreadPoolOptions, ThreadPoolTask } from \"./types\";\n\nexport default abstract class AbstractThreadPoolExecutor {\n  constructor(options?: ThreadPoolOptions<AbstractWorker>) { }\n  abstract submit: (task: ThreadPoolTask) => void;\n}","import AbstractThread from \"./AbstractThread\";\nimport AbstractThreadPoolExecutor from \"./AbstractThreadPoolExecutor\";\nimport { Queue } from \"./util/types\";\n\ndeclare type ThreadPoolTask = {\n  func: Function,\n  args: ArgumentType,\n  success: (event: Event) => void,\n  error: (event: Event | TypeError) => void,\n  // delay?: number,\n}\n\ndeclare type ThreadUnit<W extends AbstractWorker> = {\n  worker: W,\n  uri: string,\n}\n\ndeclare interface ThreadFactory<W extends AbstractWorker> {\n  getThread: (task?: Function) => ThreadUnit<W>\n  destroy: (thread: ThreadUnit<W>) => void\n}\n\ndeclare type ThreadPoolOptions<W extends AbstractWorker> = {\n  corePoolSize: number;\n  maximumPoolSize: number;\n  keepAliveTime: number;\n  timeUnit: TimeUnit;\n  workQueue: Queue<ThreadPoolTask>;\n  workerFactory?: ThreadFactory<W>;\n  rejectedExecutionHandler?: RejectedExecutionHandler;\n}\n\ndeclare interface RejectedExecutionHandler {\n  rejectedExecution: (task: ThreadPoolTask, poolExecutor: AbstractThreadPoolExecutor, error: TypeError) => void;\n}\n\nenum TimeUnit {\n  MILLISECONDS = 1,\n  SECONDS = 1000 * MILLISECONDS,\n  MINUTES = 60 * SECONDS,\n  HOURS = 60 * MINUTES,\n  DAYS = 24 * HOURS\n}\n\ndeclare interface ThreadPoolExecutorConstructor {\n  readonly prototype: AbstractThreadPoolExecutor;\n  new(): AbstractThreadPoolExecutor;\n}\n\n\ndeclare interface ThreadConstructor {\n  readonly prototype: AbstractThread;\n  new(): AbstractThread;\n}\n\n// register task Base\ndeclare interface CollectionWorkerBase {\n  register: (tasks: { name: string, task: Function }[]) => boolean;\n  unregister: (taskName: string | string[]) => boolean;\n}\n\n// independent serial tasks worker\n// TODO let me think about this\ndeclare interface WorkerTasksWrapperInterface extends CollectionWorkerBase {\n  run<T>(task: { name: string, dealy?: number } | { name: string, dealy?: number }[]): Promise<T>;\n}\n\ndeclare interface WorkerPoolInterface extends CollectionWorkerBase {\n  submit<T>(task: string | string[] | Function, dealy?: number): Promise<T>;\n  // TODO 暂时没想好\n  execption: () => void;\n}\n\ndeclare type BaseObject = Object | Array<BaseObject> | String | Number | Boolean;\n\ndeclare type ArgumentType = Array<BaseObject>\n\ndeclare type JavaScriptBaseType = 'object' | 'undefined' | 'string' | 'number' | 'boolean' | 'function' | 'null';\n\ndeclare type ExtensionType = 'array' | 'action';\n\ndeclare type ExtensionArrayType = 'actionsArray' | 'arraysArray' | 'objectsArray' | 'postParamsArray' | 'stringsArray';\n\ndeclare type InferredType = JavaScriptBaseType | ExtensionType | ExtensionArrayType\n\ndeclare type ExecptionMessage = {\n  expected: String;\n  received: ArgumentType | Function | Object;\n  extraInfo?: String\n}\n\ndeclare type TestArrayType = {\n  [key in ExtensionArrayType]: (arr: any[]) => boolean;\n}\n\ndeclare type FuncMessage = { message: String }\n\ndeclare type CollectionFuncObj = FuncMessage & {\n  func: Function;\n}\n\ndeclare type PostParams = FuncMessage & {\n  args: Array<any>;\n}\n\nexport {\n  ThreadPoolExecutorConstructor,\n  RejectedExecutionHandler,\n  ThreadPoolTask,\n  ThreadUnit,\n  ThreadFactory,\n  TimeUnit,\n  ThreadPoolOptions,\n  ThreadConstructor,\n  WorkerTasksWrapperInterface,\n  WorkerPoolInterface,\n  BaseObject,\n  ArgumentType,\n  JavaScriptBaseType,\n  ExtensionType,\n  ExtensionArrayType,\n  InferredType,\n  ExecptionMessage,\n  TestArrayType,\n  FuncMessage,\n  CollectionFuncObj,\n  PostParams\n}","import { Queue } from \"./types\";\n\nexport default class ArrayQueue<E> implements Queue<E>{\n\n  private element: Array<E>\n  private length: number\n  constructor(size: number) {\n    this.length = size\n    this.element = []\n  }\n  public size: () => number = () => {\n    return this.element.length\n  }\n  public isEmpty: () => boolean = () => {\n    return this.element.length === 0\n  }\n  public contains: (e: E) => boolean = (e: E) => {\n    return this.element.includes(e)\n  }\n  public toArray: () => E[] = () => {\n    return Array.from(this.element)\n  }\n  public iterator: () => Iterator<E> = () => {\n    return this.element.values()\n  }\n  public add: (e: E) => boolean = (e: E) => {\n    if (this.element.length < this.length) {\n      this.element.push(e)\n      return true\n    }\n    return false\n  }\n\n  public poll: () => E = () => {\n    if (this.element.length > 0) {\n      return this.element.shift()\n    }\n    return null\n  }\n\n  public peek: () => E = () => {\n    if (this.element.length > 0) {\n      return this.element[0]\n    }\n    return null\n  }\n\n}","import SimpleThreadUnitFactory from \"./SimpleThreadUnitFactory\";\nimport AbstractThreadPoolExecutor from \"./AbstractThreadPoolExecutor\";\nimport { RejectedExecutionHandler, ThreadFactory, ThreadPoolOptions, ThreadPoolTask, ThreadUnit, TimeUnit } from \"./types\";\nimport ArrayQueue from \"./util/ArrayQueue\";\nimport { Queue } from \"./util/types\";\nimport { isValid, argumentError, isValidObjectWith } from \"./util/utils\";\n\nclass ThreadPoolExecutor<W extends AbstractWorker & { postMessage: Function }> extends AbstractThreadPoolExecutor {\n\n  // staitc constant\n  private static readonly DEFAULT_INTERVAL = 100\n\n  // defalut options \n  private corePoolSize: number\n  private maximumPoolSize: number\n  private keepAliveTime: number\n  private timeUnit: TimeUnit\n  private workQueue: Queue<ThreadPoolTask>\n  private workerFactory?: ThreadFactory<W>\n  private rejectedExecutionHandler?: RejectedExecutionHandler\n\n  // worker thread and lock\n  private workerThread: Array<{ thread: ThreadUnit<W>, lock: boolean }>\n\n  // interval time unit is ms\n  private interval: NodeJS.Timer\n\n  // thread timeout handler\n  private timeoutHandlers: Array<NodeJS.Timer> = []\n\n  private startConsumer() {\n    this.interval = setInterval(this.consumer, ThreadPoolExecutor.DEFAULT_INTERVAL)\n  }\n\n  constructor(options?: ThreadPoolOptions<W>) {\n    super()\n    // init default options\n    this.corePoolSize = options?.corePoolSize || 5\n    this.maximumPoolSize = options?.maximumPoolSize || 10\n    this.keepAliveTime = options?.keepAliveTime || 30\n    this.timeUnit = options?.timeUnit || TimeUnit.SECONDS\n    this.workQueue = options?.workQueue || new ArrayQueue<ThreadPoolTask>(20)\n    // @ts-ignore\n    this.workerFactory = options?.workerFactory || new SimpleThreadUnitFactory()\n    this.rejectedExecutionHandler = options?.rejectedExecutionHandler || new DefalutHandler()\n\n    // init worker thread\n    this.workerThread = new Array<{ thread: ThreadUnit<W>, lock: boolean }>(this.corePoolSize)\n    this.initThread()\n  }\n\n  private initThread() {\n    for (let i = 0; i < this.corePoolSize; i++) {\n      this.workerThread[i] = { thread: this.workerFactory.getThread(), lock: false }\n    }\n  }\n\n  private getIdleWorker(task: ThreadPoolTask): { thread: ThreadUnit<W>, lock: boolean } | undefined {\n    // get idle worker\n    let workerIndex = this.workerThread.findIndex(item => !item.lock);\n    if (workerIndex == -1) {\n      // no idle worker\n      if (this.workerThread.length < this.maximumPoolSize) {\n        // create new worker\n        this.workerThread.push({ thread: this.workerFactory.getThread(), lock: false })\n        // add timeout handler\n        // const that = this\n        this.timeoutHandlers.push(setTimeout(() => { this.delayDestroy() }, this.keepAliveTime * this.timeUnit))\n      } else {\n        // reject task\n        return\n      }\n    }\n    // reset timeout handler\n    if (workerIndex >= this.corePoolSize) {\n      const handlerIndex = workerIndex - this.corePoolSize\n      clearTimeout(this.timeoutHandlers[handlerIndex])\n      // const that = this\n      this.timeoutHandlers.splice(handlerIndex, 1, setTimeout(() => { this.delayDestroy() }, this.keepAliveTime * this.timeUnit))\n    }\n    return this.workerThread[workerIndex]\n  }\n\n  public submit: (task: ThreadPoolTask) => void = (task) => {\n    const validTask = isValidObjectWith(['func', 'success'])(task)\n    if (!validTask) {\n      console.error(argumentError({ expected: \"a Object, and has Property ['func', 'success']\", received: task }))\n      return null\n    }\n    const validWork = isValid(task.func)('function')\n    if (!validWork) {\n      console.error(argumentError({ expected: 'a function', received: task.func }))\n      return null\n    }\n    const validArgs = isValid(task.args)(['array', 'undefined'])\n    if (!validArgs) {\n      console.error(argumentError({ expected: 'an array', received: task.args }))\n      return null\n    }\n    const validSuccess = isValid(task.success)('function')\n    if (!validSuccess) {\n      console.error(argumentError({ expected: 'a function', received: task.success }))\n      return null\n    }\n    const validError = isValid(task.error)(['function', 'undefined'])\n    if (!validError) {\n      console.error(argumentError({ expected: 'a function', received: task.error }))\n      return null\n    }\n    return this.run(task)\n  }\n\n  private run: (task: ThreadPoolTask, addQueue?: boolean) => boolean = (task, addQueue = true) => {\n    // get idle thread\n    const thread = this.getIdleWorker(task)\n    // send task to worker\n    if (thread) {\n      try {\n        const worker = thread.thread.worker\n        function success(event: Event) {\n          worker.removeEventListener('message', success)\n          // close lock\n          thread.lock = false\n          // call back\n          task.success(event)\n        }\n        function error(event: Event) {\n          worker.removeEventListener('error', error)\n          // close lock\n          thread.lock = false\n          console.error(`Error: Line ${error}`)\n          // call back\n          task.error && task.error(event)\n        }\n        worker.addEventListener('message', success)\n        worker.addEventListener('error', error)\n        worker.postMessage({ message: { task: `(${task.func.toString()})`, args: task.args } });\n        // lock worker\n        thread.lock = true\n        return true\n      } catch (error) {\n        console.error(`this task ${task.func} error. thread running fails ${error}`)\n      }\n    }\n    if (addQueue) {\n      // no idle worker and no create worker\n      // add queue\n      const res = this.workQueue.add(task)\n      if (!res) {\n        // reject\n        this.rejectedExecutionHandler.rejectedExecution(task, this, new TypeError('task queue is full'))\n      }\n      // queue is not empty\n      // start consumer\n      if (!this.interval) {\n        this.startConsumer()\n      }\n    }\n    return false\n  }\n\n  private consumer = () => {\n    // single thread setInterval to consume task\n    // Batch consumption tasks\n    const tasks = this.workQueue.toArray()\n    let removeNums = 0\n    tasks.every(item => {\n      const res = this.run(item, false)\n      if (res) {\n        removeNums++\n      }\n      return res\n    })\n    // remove consumed tasks\n    for (let i = 0; i < removeNums; i++) {\n      // remove task\n      this.workQueue.poll()\n    }\n    if (this.workQueue.isEmpty()) {\n      // queue is empty\n      // stop consumer\n      clearInterval(this.interval)\n      this.interval = undefined\n    }\n  }\n\n  private delayDestroy() {\n    // find idle thread\n    let workerIndex: number = -1\n    for (let i = this.workerThread.length - 1; i >= this.corePoolSize; i--) {\n      if (!this.workerThread[i].lock) {\n        workerIndex = i\n        break\n      }\n    }\n\n    if (workerIndex > -1) {\n      const thread = this.workerThread[workerIndex]\n      // destroy thread\n      this.workerFactory.destroy(thread.thread)\n      this.workerThread.splice(workerIndex, 1)\n      // remove timeout handler\n      const handlerIndex = workerIndex - this.corePoolSize\n      this.timeoutHandlers.splice(handlerIndex, 1)\n    }\n  }\n}\n\nclass DefalutHandler<T> implements RejectedExecutionHandler {\n  rejectedExecution: (task: ThreadPoolTask, poolExecutor: AbstractThreadPoolExecutor, error: TypeError) => void = (task, poolExecutor, error) => {\n    console.error(error)\n    task.error && task.error(error)\n  }\n}\n\nexport default ThreadPoolExecutor","import { Thread } from \"./Thread\"\nimport ThreadPoolExecutor from \"./ThreadPoolExecutor\";\nimport { ThreadConstructor, ThreadPoolExecutorConstructor } from \"./types\"\nclass WorkerBuilder {\n  private thread: ThreadConstructor;\n  private threadPoolExecutor: ThreadPoolExecutorConstructor;\n  \n  constructor() {\n    if (!window.Worker) {\n      console.error('This browser does not support Workers.')\n      return\n    }\n    if (!window.SharedWorker) {\n      console.error('This browser does not support SharedWorker.')\n      return\n    }\n    if (!(window.URL.createObjectURL || window.webkitURL.createObjectURL)) {\n      console.error('This browser does not have URL.createObjectURL method.')\n      return\n    }\n    this.thread = Thread\n    this.threadPoolExecutor = ThreadPoolExecutor\n  }\n  public build = () => this.thread\n\n  public buildPoolExecutor = () => this.threadPoolExecutor\n}\n\nexport default WorkerBuilder"],"names":["Deamon","objectUri","undefined","constructor","buildScript","buildUri","URL","window","webkitURL","blob","Blob","jsScriprt","type","this","createObjectURL","create","getDeamonWorker","SharedWorker","DeamonWorker","isValid","Array","isArray","types","some","isValidArg","argument","arg","isValidAction","testArray","toString","isValidObjectWith","obj","func","message","fields","every","field","hasOwnProperty","actionsArray","isValidActionsArray","arr","arraysArray","item","objectsArray","isValidObjectsArray","postParamsArray","isValidPostParamsArray","stringsArray","isValidPostParams","args","argumentError","expected","received","extraInfo","TypeError","JSON","stringify","err","ThreadBase","AbstractThreadFactory","SimpleThreadFactory","super","task","getThread","uri","worker","Worker","destroy","terminate","revokeObjectURL","Thread","AbstractThread","threadFactory","deamonWorker","thread","createDeamonWorker","that","delay","deammonTiming","Promise","resolve","reject","port","onmessage","e","data","postMessage","run","validWork","validArgs","console","error","deamonPromise","catch","event","onerror","lineno","filename","SimpleThreadUnitFactory","AbstractThreadPoolExecutor","options","TimeUnit","ArrayQueue","element","length","size","isEmpty","contains","includes","toArray","from","iterator","values","add","push","poll","shift","peek","ThreadPoolExecutor","DEFAULT_INTERVAL","corePoolSize","maximumPoolSize","keepAliveTime","timeUnit","workQueue","workerFactory","rejectedExecutionHandler","workerThread","interval","timeoutHandlers","startConsumer","setInterval","consumer","SECONDS","DefalutHandler","initThread","let","i","lock","getIdleWorker","handlerIndex","workerIndex","findIndex","setTimeout","delayDestroy","clearTimeout","splice","submit","success","addQueue","addEventListener","removeEventListener","rejectedExecution","tasks","removeNums","res","clearInterval","poolExecutor","WorkerBuilder","threadPoolExecutor","build","buildPoolExecutor"],"mappings":"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"}